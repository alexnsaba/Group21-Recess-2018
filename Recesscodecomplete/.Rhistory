K = 5
predictions <- knn_predict(test.df, train.df, K) #calling knn_predict()
test.df[,7] <- predictions #Adding predictions in test data as 7th column
print(accuracy(test.df))
#getting the data
knn.df <- read.csv('analysisDoc.csv', header = FALSE, sep = ',')
knn.df
#checking the dimensions of the data set.
dim(knn.df)
# checking the summary of the dataset.
summary(knn.df)
# randomize the dataset
set.seed(2)
knn.df<- knn.df[sample(nrow(knn.df)),]
train.df <- knn.df[1:as.integer(0.7*10),]
test.df <- knn.df[as.integer(0.7*10 +1):10,]
# euclidean distance calculation
euclideanDist <- function(a, b){
d = 0
for(i in c(1:(length(a)-1) ))
{
d = d + (a[[i]]-b[[i]])^2
}
d = sqrt(d)
return(d)
}
# prediction
knn_predict <- function(test_data, train_data, k_value){
pred <- c()#empty pred vector
#LOOP-1
for(i in c(1:nrow(test_data))){ #looping over each record of test data
eu_dist =c()#eu_dist & eu_char empty  vector
eu_char = c()
good = 0 #good & bad variable initialization with 0 value
bad = 0
#LOOP-2-looping over train data
for(j in c(1:nrow(train_data))){
#adding euclidean distance b/w test data point and train data to eu_dist
eu_dist <- c(eu_dist, euclideanDist(test_data[i,], train_data[j,]))
#adding class variable of training data in eu_char
eu_char <- c(eu_char, as.character(train_data[j,][[6]]))
}
eu <- data.frame(eu_char, eu_dist) #eu dataframe created with eu_char & eu_
eu <- eu[order(eu$eu_dist),]#sorting eu dataframe to gettop K neighb
eu <- eu[1:k_value,] #eu dataframe with top K neighbors
#Loop 3: loops over eu and counts classes of neibhors.
for(k in c(1:nrow(eu))){
if(as.character(eu[k,"eu_char"]) == "g"){
good = good + 1
}
else
bad = bad + 1
}
# Compares the no. of neighbors with class label good or bad
if(good > bad){#if majority of neighbors are good then put "g" in
pred <- c(pred, "g")
}
else if(good < bad){
#if majority of neighbors are bad then put "b" in pred vecto
pred <- c(pred, "b")
}
}
return(pred) #return pred vector
}
#accuracy calculation
accuracy <- function(test_data){
correct = 0
for(i in c(1:nrow(test_data))){
if(test_data[i,6] == test_data[i,7]){
correct = correct+1
}
}
accu = correct/nrow(test_data) * 100  
return(accu)
}
#printing the accuracy
K = 5
predictions <- knn_predict(test.df, train.df, K) #calling knn_predict()
test.df[,7] <- predictions #Adding predictions in test data as 7th column
print(accuracy(test.df))
warnings()
#getting the data
knn.df <- read.csv('analysisDoc.csv', header = FALSE, sep = ',')
knn.df
#checking the dimensions of the data set.
dim(knn.df)
# checking the summary of the dataset.
summary(knn.df)
# randomize the dataset
set.seed(2)
knn.df<- knn.df[sample(nrow(knn.df)),]
train.df <- knn.df[1:as.integer(0.7*10),]
test.df <- knn.df[as.integer(0.7*10 +1):10,]
# euclidean distance calculation
euclideanDist <- function(a, b){
d = 0
for(i in c(1:(length(a)-1) ))
{
d = d + (a[i]-b[i])^2
}
d = sqrt(d)
return(d)
}
# prediction
knn_predict <- function(test_data, train_data, k_value){
pred <- c()#empty pred vector
#LOOP-1
for(i in c(1:nrow(test_data))){ #looping over each record of test data
eu_dist =c()#eu_dist & eu_char empty  vector
eu_char = c()
good = 0 #good & bad variable initialization with 0 value
bad = 0
#LOOP-2-looping over train data
for(j in c(1:nrow(train_data))){
#adding euclidean distance b/w test data point and train data to eu_dist
eu_dist <- c(eu_dist, euclideanDist(test_data[i,], train_data[j,]))
#adding class variable of training data in eu_char
eu_char <- c(eu_char, as.character(train_data[j,][[6]]))
}
eu <- data.frame(eu_char, eu_dist) #eu dataframe created with eu_char & eu_
eu <- eu[order(eu$eu_dist),]#sorting eu dataframe to gettop K neighb
eu <- eu[1:k_value,] #eu dataframe with top K neighbors
#Loop 3: loops over eu and counts classes of neibhors.
for(k in c(1:nrow(eu))){
if(as.character(eu[k,"eu_char"]) == "g"){
good = good + 1
}
else
bad = bad + 1
}
# Compares the no. of neighbors with class label good or bad
if(good > bad){#if majority of neighbors are good then put "g" in
pred <- c(pred, "g")
}
else if(good < bad){
#if majority of neighbors are bad then put "b" in pred vecto
pred <- c(pred, "b")
}
}
return(pred) #return pred vector
}
#accuracy calculation
accuracy <- function(test_data){
correct = 0
for(i in c(1:nrow(test_data))){
if(test_data[i,6] == test_data[i,7]){
correct = correct+1
}
}
accu = correct/nrow(test_data) * 100  
return(accu)
}
#printing the accuracy
K = 5
predictions <- knn_predict(test.df, train.df, K) #calling knn_predict()
test.df[,7] <- predictions #Adding predictions in test data as 7th column
print(accuracy(test.df))
#getting the data
knn.df <- read.csv('analysisDoc.csv', header = FALSE, sep = ',')
knn.df
#checking the dimensions of the data set.
dim(knn.df)
# checking the summary of the dataset.
summary(knn.df)
# randomize the dataset
set.seed(2)
knn.df<- knn.df[sample(nrow(knn.df)),]
train.df <- knn.df[1:as.integer(0.7*10),]
test.df <- knn.df[as.integer(0.7*10 +1):10,]
# euclidean distance calculation
euclideanDist <- function(a, b){
d = 0
for(i in c(1:(length(a)-1) ))
{
d = d + (a[i]-b[i])^2
}
d = sqrt(d)
return(d)
}
# prediction
knn_predict <- function(test_data, train_data, k_value){
pred <- c()#empty pred vector
#LOOP-1
for(i in c(1:nrow(test_data))){ #looping over each record of test data
eu_dist =c()#eu_dist & eu_char empty  vector
eu_char = c()
good = 0 #good & bad variable initialization with 0 value
bad = 0
#LOOP-2-looping over train data
for(j in c(1:nrow(train_data))){
#adding euclidean distance b/w test data point and train data to eu_dist
eu_dist <- c(eu_dist, euclideanDist(test_data[i,], train_data[j,]))
#adding class variable of training data in eu_char
eu_char <- c(eu_char, as.character(train_data[j,][[6]]))
}
eu <- data.frame(eu_char, eu_dist) #eu dataframe created with eu_char & eu_
eu <- eu[order(eu_dist),]#sorting eu dataframe to gettop K neighb
eu <- eu[1:k_value,] #eu dataframe with top K neighbors
#Loop 3: loops over eu and counts classes of neibhors.
for(k in c(1:nrow(eu))){
if(as.character(eu[k,"eu_char"]) == "g"){
good = good + 1
}
else
bad = bad + 1
}
# Compares the no. of neighbors with class label good or bad
if(good > bad){#if majority of neighbors are good then put "g" in
pred <- c(pred, "g")
}
else if(good < bad){
#if majority of neighbors are bad then put "b" in pred vecto
pred <- c(pred, "b")
}
}
return(pred) #return pred vector
}
#accuracy calculation
accuracy <- function(test_data){
correct = 0
for(i in c(1:nrow(test_data))){
if(test_data[i,6] == test_data[i,7]){
correct = correct+1
}
}
accu = correct/nrow(test_data) * 100  
return(accu)
}
#printing the accuracy
K = 5
predictions <- knn_predict(test.df, train.df, K) #calling knn_predict()
test.df[,7] <- predictions #Adding predictions in test data as 7th column
print(accuracy(test.df))
#Getting the data
myframe <- read.table(file.choose(), sep=',')
view(myframe)
# excluding the first variable (id), since its not required
myframe <- myframe[,-1]
# normalizing the data
data_norm <- function(x){((x-min(x))/(max(x)-min(x)))}
#applying a normalizing function to the data
myframe_norm <- as.data.frame(lapply(myframe[,-4], data_norm))
summary(myframe[,2:5])
summary(myframe_norm[,1:5])
library(class)
# specifying the train data from the normalized data, but we consider the number of rows
myframe_train <- myframe_norm[1:450,]
# specifying the test data from the normalized data, also we consider the number of rows
myframe_test <- myframe_norm[451:569,]
# we import alibrary
#we need to predict the results
pred <- knn(myframe_train, myframe_test,myframe[1:450,1],k=21)
table(pred,myframe[451:569,1])
#Getting the data
myframe <- read.table(file.choose(), sep=',')
view(myframe)
# excluding the first variable (id), since its not required
myframe <- myframe[,-1]
# normalizing the data
data_norm <- function(x){((x-min(x))/(max(x)-min(x)))}
#applying a normalizing function to the data
myframe_norm <- as.data.frame(lapply(myframe[,-4], data_norm))
summary(myframe[,2:5])
summary(myframe_norm[,1:5])
library(class)
# specifying the train data from the normalized data, but we consider the number of rows
myframe_train <- myframe_norm[1:450,]
# specifying the test data from the normalized data, also we consider the number of rows
myframe_test <- myframe_norm[451:569,]
# we import alibrary
#we need to predict the results
pred <- knn(myframe_train, myframe_test,myframe[1:450,1],k=21)
table(pred,myframe[451:569,1])
#Getting the data
myframe <- read.table(file.choose(), sep=',')
view(myframe)
# excluding the first variable (id), since its not required
myframe <- myframe[,-1]
# normalizing the data
data_norm <- function(x){((x-min(x))/(max(x)-min(x)))}
#applying a normalizing function to the data
myframe_norm <- as.data.frame(lapply(myframe[,-4], data_norm))
summary(myframe[,2:5])
summary(myframe_norm[,1:4])
# specifying the train data from the normalized data, but we consider the number of rows
myframe_train <- myframe_norm[1:450,]
# specifying the test data from the normalized data, also we consider the number of rows
myframe_test <- myframe_norm[451:569,]
# we import alibrary
library(class)
#we need to predict the results
pred <- knn(myframe_train, myframe_test,myframe[1:450,1],k=21)
table(pred,myframe[451:569,1])
shiny::runApp('C:/Users/user/Desktop/Userinterface')
runApp('C:/Users/user/Desktop/Userinterface')
runApp('C:/Users/user/Desktop/Userinterface')
runApp('C:/Users/user/Desktop/Userinterface')
runApp('C:/Users/user/Desktop/Userinterface')
runApp('C:/Users/user/Desktop/Userinterface')
runApp('C:/Users/user/Desktop/Userinterface')
runApp('C:/Users/user/Desktop/Userinterface')
runApp('C:/Users/user/Desktop/Userinterface')
runApp('C:/Users/user/Desktop/Userinterface')
runApp('C:/Users/user/Desktop/Userinterface')
runApp('C:/Users/user/Desktop/Userinterface')
runApp('C:/Users/user/Desktop/Userinterface')
runApp('C:/Users/user/Desktop/Userinterface')
runApp('C:/Users/user/Desktop/Userinterface')
runApp('C:/Users/user/Desktop/Userinterface')
runApp('C:/Users/user/Desktop/Userinterface')
runApp('C:/Users/user/Desktop/Userinterface')
runApp('C:/Users/user/Desktop/Userinterface')
runApp('C:/Users/user/Desktop/Userinterface')
runApp('C:/Users/user/Desktop/Userinterface')
runApp('C:/Users/user/Desktop/Userinterface')
runApp('C:/Users/user/Desktop/Userinterface')
runApp('C:/Users/user/Desktop/Userinterface')
runApp('C:/Users/user/Desktop/Userinterface')
runApp('C:/Users/user/Desktop/Userinterface')
runApp('C:/Users/user/Desktop/Userinterface')
runApp('C:/Users/user/Desktop/Userinterface')
runApp('C:/Users/user/Desktop/Userinterface')
runApp('C:/Users/user/Desktop/Userinterface')
runApp('C:/Users/user/Desktop/Userinterface')
runApp('C:/Users/user/Desktop/Userinterface')
runApp('C:/Users/user/Desktop/Userinterface')
runApp('C:/Users/user/Desktop/Userinterface')
runApp('C:/Users/user/Desktop/Userinterface')
runApp('C:/Users/user/Desktop/Userinterface')
runApp('C:/Users/user/Desktop/Userinterface')
runApp('C:/Users/user/Desktop/Userinterface')
runApp('C:/Users/user/Desktop/Userinterface')
runApp('C:/Users/user/Desktop/Userinterface')
runApp('C:/Users/user/Desktop/Userinterface')
runApp('C:/Users/user/Desktop/Userinterface')
runApp('C:/Users/user/Desktop/Userinterface')
runApp('C:/Users/user/Desktop/Userinterface')
runApp('C:/Users/user/Desktop/Userinterface')
runApp('C:/Users/user/Desktop/Userinterface')
runApp('C:/Users/user/Desktop/Userinterface')
runApp('C:/Users/user/Desktop/Userinterface')
runApp('C:/Users/user/Desktop/Userinterface')
runApp('C:/Users/user/Desktop/Userinterface')
runApp('C:/Users/user/Desktop/Userinterface')
runApp('C:/Users/user/Desktop/Userinterface')
runApp('C:/Users/user/Desktop/Userinterface')
runApp('C:/Users/user/Desktop/Userinterface')
runApp('C:/Users/user/Desktop/Userinterface')
runApp('C:/Users/user/Desktop/Userinterface')
runApp('C:/Users/user/Desktop/Userinterface')
runApp('C:/Users/user/Desktop/Userinterface')
runApp('C:/Users/user/Desktop/Userinterface')
runApp('C:/Users/user/Desktop/Userinterface')
runApp('C:/Users/user/Desktop/Userinterface')
shiny::runApp('C:/Users/user/Desktop/Userinterface/login')
install.packages("dplyr")
runApp('C:/Users/user/Desktop/Userinterface/login')
runApp('C:/Users/user/Desktop/Userinterface/login')
runApp('C:/Users/user/Desktop/Userinterface/login')
shiny::runApp('C:/Users/user/Desktop/ShinyR/trying')
runApp('C:/Users/user/Desktop/ShinyR/trying')
shiny::runApp('C:/Users/user/Desktop/ShinyR/trying')
runApp('C:/Users/user/Desktop/ShinyR/trying')
runApp('C:/Users/user/Desktop/ShinyR/trying')
runApp('C:/Users/user/Desktop/ShinyR/trying')
shiny::runApp('C:/Users/user/Desktop/ShinyR/trying')
shiny::runApp('C:/Users/user/Desktop/ShinyR/trying')
runApp('C:/Users/user/Desktop/ShinyR/trying')
runApp('C:/Users/user/Desktop/ShinyR/trying')
runApp('C:/Users/user/Desktop/ShinyR/trying')
runApp('C:/Users/user/Desktop/ShinyR/trying')
runApp('C:/Users/user/Desktop/ShinyR/trying')
runApp('C:/Users/user/Desktop/ShinyR/trying')
runApp('C:/Users/user/Desktop/ShinyR/trying')
runApp('C:/Users/user/Desktop/ShinyR/trying')
runApp('C:/Users/user/Desktop/ShinyR/trying')
runApp('C:/Users/user/Desktop/ShinyR/trying')
runApp('C:/Users/user/Desktop/ShinyR/trying')
runApp('C:/Users/user/Desktop/ShinyR/trying')
runApp('C:/Users/user/Desktop/ShinyR/trying')
runApp('C:/Users/user/Desktop/ShinyR/trying')
runApp('C:/Users/user/Desktop/ShinyR/trying')
runApp('C:/Users/user/Desktop/ShinyR/trying')
runApp('C:/Users/user/Desktop/ShinyR/trying')
runApp('C:/Users/user/Desktop/ShinyR/trying')
runApp('C:/Users/user/Desktop/ShinyR/trying')
runApp('C:/Users/user/Desktop/ShinyR/trying')
runApp('C:/Users/user/Desktop/ShinyR/trying')
runApp('C:/Users/user/Desktop/ShinyR/trying')
runApp('C:/Users/user/Desktop/ShinyR/trying')
runApp('C:/Users/user/Desktop/ShinyR/trying')
runApp('C:/Users/user/Desktop/ShinyR/trying')
runApp('C:/Users/user/Desktop/ShinyR/trying')
runApp('C:/Users/user/Desktop/ShinyR/trying')
runApp('C:/Users/user/Desktop/ShinyR/trying')
runApp()
runApp('C:/Users/user/Desktop/ShinyR/trying')
runApp('C:/Users/user/Desktop/ShinyR/trying')
runApp('C:/Users/user/Desktop/ShinyR/trying')
runApp('C:/Users/user/Desktop/ShinyR/trying')
runApp('C:/Users/user/Desktop/ShinyR/trying')
runApp('C:/Users/user/Desktop/ShinyR/trying')
runApp('C:/Users/user/Desktop/ShinyR/trying')
runApp('C:/Users/user/Desktop/ShinyR/trying')
runApp('C:/Users/user/Desktop/ShinyR/trying')
runApp('C:/Users/user/Desktop/ShinyR/trying')
runApp('C:/Users/user/Desktop/ShinyR/trying')
runApp('C:/Users/user/Desktop/ShinyR/trying')
runApp('C:/Users/user/Desktop/ShinyR/trying')
runApp('C:/Users/user/Desktop/ShinyR/trying')
runApp('C:/Users/user/Desktop/ShinyR/trying')
runApp('C:/Users/user/Desktop/ShinyR/trying')
runApp('C:/Users/user/Desktop/ShinyR/trying')
runApp('C:/Users/user/Desktop/ShinyR/trying')
runApp('C:/Users/user/Desktop/ShinyR/trying')
runApp('C:/Users/user/Desktop/ShinyR/trying')
runApp('C:/Users/user/Desktop/Userinterface')
runApp('C:/Users/user/Desktop/ShinyR/trying')
runApp('C:/Users/user/Desktop/ShinyR/trying')
runApp('C:/Users/user/Desktop/ShinyR/trying')
runApp('C:/Users/user/Desktop/ShinyR/trying')
runApp('C:/Users/user/Desktop/ShinyR/trying')
runApp('C:/Users/user/Desktop/ShinyR/trying')
runApp('C:/Users/user/Desktop/ShinyR/trying')
runApp('C:/Users/user/Desktop/ShinyR/trying')
runApp('C:/Users/user/Desktop/ShinyR/trying')
runApp('C:/Users/user/Desktop/ShinyR/trying')
runApp('C:/Users/user/Desktop/ShinyR/trying')
runApp('C:/Users/user/Desktop/ShinyR/trying')
runApp('C:/Users/user/Desktop/ShinyR/trying')
runApp('C:/Users/user/Desktop/ShinyR/trying')
runApp('C:/Users/user/Desktop/ShinyR/trying')
runApp('C:/Users/user/Desktop/ShinyR/trying')
runApp('C:/Users/user/Desktop/ShinyR/trying')
runApp('C:/Users/user/Desktop/ShinyR/trying')
runApp('C:/Users/user/Desktop/ShinyR/trying')
runApp('C:/Users/user/Desktop/ShinyR/trying')
runApp('C:/Users/user/Desktop/ShinyR/trying')
runApp('C:/Users/user/Desktop/ShinyR/trying')
runApp('C:/Users/user/Desktop/ShinyR/trying')
runApp('C:/Users/user/Desktop/ShinyR/trying')
runApp('C:/Users/user/Desktop/ShinyR/trying')
runApp('C:/Users/user/Desktop/ShinyR/trying')
shiny::runApp('brian/free')
shiny::runApp('C:/Users/user/Desktop/R code')
library(shiny); runApp('C:/Users/user/Desktop/R code/final.R')
runApp('try')
runApp('C:/Users/user/Desktop/R code/try')
runApp('C:/Users/user/Desktop/R code/final.R')
runApp('C:/Users/user/Desktop/R code/try')
runApp('C:/Users/user/Desktop/R code/try')
runApp('C:/Users/user/Desktop/R code/try')
help(concatnation)
help(concatenation)
help(concat)
runApp('C:/Users/user/Desktop/R code/try')
runApp('C:/Users/user/Desktop/R code/try')
runApp('C:/Users/user/Desktop/R code/try')
runApp('C:/Users/user/Desktop/R code/try')
runApp('C:/Users/user/Desktop/R code/try')
runApp('C:/Users/user/Desktop/R code/try')
runApp('C:/Users/user/Desktop/R code/try')
runApp('C:/Users/user/Desktop/R code/try')
runApp('C:/Users/user/Desktop/R code/try')
runApp('C:/Users/user/Desktop/R code/try')
runApp('C:/Users/user/Desktop/R code/try')
runApp('C:/Users/user/Desktop/R code/try')
runApp('C:/Users/user/Desktop/R code/try')
runApp('C:/Users/user/Desktop/R code/try')
runApp('C:/Users/user/Desktop/R code/try')
runApp('C:/Users/user/Desktop/ShinyR/trying')
runApp('C:/Users/user/Desktop/ShinyR/trying')
runApp('C:/Users/user/Desktop/R code/try')
runApp('C:/Users/user/Desktop/R code/try')
runApp('C:/Users/user/Desktop/R code/try')
runApp('C:/Users/user/Desktop/R code/try')
runApp('C:/Users/user/Desktop/R code/try')
runApp('C:/Users/user/Desktop/R code/try')
runApp('C:/Users/user/Desktop/R code/try')
runApp('C:/Users/user/Desktop/R code/try')
runApp('C:/Users/user/Desktop/R code/try')
runApp('C:/Users/user/Desktop/R code/try')
shiny::runApp('C:/Users/user/Desktop/Recess code')
runApp('C:/Users/user/Desktop/R code/try')
runApp('C:/Users/user/Desktop/R code/try')
runApp('C:/Users/user/Desktop/R code/try')
runApp('C:/Users/user/Desktop/R code/try')
runApp('C:/Users/user/Desktop/ShinyR/trying')
runApp('C:/Users/user/Desktop/ShinyR/trying')
runApp('C:/Users/user/Desktop/R code/final.R')
runApp('C:/Users/user/Desktop/R code/final.R')
runApp('C:/Users/user/Desktop/R code/try')
runApp('C:/Users/user/Desktop/R code/try')
runApp('C:/Users/user/Desktop/R code/try')
runApp('C:/Users/user/Desktop/R code/try')
runApp('C:/Users/user/Desktop/Recess code')
runApp('C:/Users/user/Desktop/R code/try')
runApp('C:/Users/user/Desktop/R code/try')
runApp('C:/Users/user/Desktop/R code/try')
runApp('C:/Users/user/Desktop/R code/try')
runApp('C:/Users/user/Desktop/R code/try')
runApp('C:/Users/user/Desktop/R code/try')
runApp('C:/Users/user/Desktop/R code/final.R')
runApp('C:/Users/user/Desktop/R code/try')
runApp('C:/Users/user/Desktop/R code/try')
runApp('C:/Users/user/Desktop/R code/try')
runApp('C:/Users/user/Desktop/R code/try')
runApp('C:/Users/user/Desktop/R code/try')
runApp('C:/Users/user/Desktop/R code/try')
runApp('C:/Users/user/Desktop/R code/try')
runApp('C:/Users/user/Desktop/R code/try')
shiny::runApp('C:/Users/user/Desktop/Recess code')
